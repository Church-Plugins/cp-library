<?php
/**
 * Filter System Error Codes
 *
 * Defines standardized error codes and messages for the filter system.
 *
 * @package CP_Library\Filters
 * @since 1.6.0
 */

namespace CP_Library\Filters;

/**
 * ErrorCodes class - Provides standardized error codes and messages.
 *
 * This class defines all possible error codes that can be generated by
 * the filter system, along with their default messages and HTTP status codes.
 *
 * @since 1.6.0
 */
class ErrorCodes {

    // General errors
    const GENERAL_ERROR          = 'general_error';
    const INVALID_REQUEST        = 'invalid_request';
    const MISSING_PARAMETER      = 'missing_parameter';
    const INVALID_PARAMETER      = 'invalid_parameter';
    const UNAUTHORIZED           = 'unauthorized';
    const FORBIDDEN              = 'forbidden';
    const NOT_FOUND              = 'not_found';
    const INTERNAL_ERROR         = 'internal_error';
    
    // Filter manager errors
    const MANAGER_NOT_FOUND      = 'filter_manager_not_found';
    const INVALID_POST_TYPE      = 'invalid_post_type';
    const FILTER_REGISTRATION    = 'filter_registration_error';
    
    // Facet errors
    const FACET_NOT_FOUND        = 'facet_not_found';
    const INVALID_FACET          = 'invalid_facet';
    const FACET_INCOMPATIBLE     = 'incompatible_facet';
    
    // AJAX errors
    const INVALID_AJAX_ACTION    = 'invalid_ajax_action';
    const AJAX_RESPONSE_ERROR    = 'ajax_response_error';
    const AJAX_REQUEST_ERROR     = 'ajax_request_error';
    
    // Query errors
    const QUERY_ERROR            = 'query_error';
    const INVALID_QUERY_VAR      = 'invalid_query_var';
    
    // Validation errors
    const VALIDATION_ERROR       = 'validation_error';
    const INVALID_CONTEXT        = 'invalid_context';
    
    // Cache errors
    const CACHE_ERROR            = 'cache_error';

    /**
     * Default error messages by error code
     *
     * @var array
     */
    protected static $messages = [
        // General errors
        self::GENERAL_ERROR          => 'An error occurred in the filter system.',
        self::INVALID_REQUEST        => 'Invalid request.',
        self::MISSING_PARAMETER      => 'Required parameter is missing.',
        self::INVALID_PARAMETER      => 'Invalid parameter provided.',
        self::UNAUTHORIZED           => 'Unauthorized access.',
        self::FORBIDDEN              => 'Access forbidden.',
        self::NOT_FOUND              => 'Requested resource not found.',
        self::INTERNAL_ERROR         => 'Internal server error.',
        
        // Filter manager errors
        self::MANAGER_NOT_FOUND      => 'Filter manager not found.',
        self::INVALID_POST_TYPE      => 'Invalid post type for filter operation.',
        self::FILTER_REGISTRATION    => 'Error registering filter.',
        
        // Facet errors
        self::FACET_NOT_FOUND        => 'Filter facet not found.',
        self::INVALID_FACET          => 'Invalid filter facet.',
        self::FACET_INCOMPATIBLE     => 'Filter facet not compatible with post type.',
        
        // AJAX errors
        self::INVALID_AJAX_ACTION    => 'Invalid AJAX action.',
        self::AJAX_RESPONSE_ERROR    => 'Error processing AJAX response.',
        self::AJAX_REQUEST_ERROR     => 'Error in AJAX request.',
        
        // Query errors
        self::QUERY_ERROR            => 'Error in query execution.',
        self::INVALID_QUERY_VAR      => 'Invalid query variable.',
        
        // Validation errors
        self::VALIDATION_ERROR       => 'Validation error.',
        self::INVALID_CONTEXT        => 'Invalid filter context.',
        
        // Cache errors
        self::CACHE_ERROR            => 'Cache operation error.',
    ];

    /**
     * Default HTTP status codes by error code
     *
     * @var array
     */
    protected static $status_codes = [
        // General errors
        self::GENERAL_ERROR          => 400,
        self::INVALID_REQUEST        => 400,
        self::MISSING_PARAMETER      => 400,
        self::INVALID_PARAMETER      => 400,
        self::UNAUTHORIZED           => 401,
        self::FORBIDDEN              => 403,
        self::NOT_FOUND              => 404,
        self::INTERNAL_ERROR         => 500,
        
        // Filter manager errors
        self::MANAGER_NOT_FOUND      => 404,
        self::INVALID_POST_TYPE      => 400,
        self::FILTER_REGISTRATION    => 500,
        
        // Facet errors
        self::FACET_NOT_FOUND        => 404,
        self::INVALID_FACET          => 400,
        self::FACET_INCOMPATIBLE     => 400,
        
        // AJAX errors
        self::INVALID_AJAX_ACTION    => 400,
        self::AJAX_RESPONSE_ERROR    => 500,
        self::AJAX_REQUEST_ERROR     => 400,
        
        // Query errors
        self::QUERY_ERROR            => 500,
        self::INVALID_QUERY_VAR      => 400,
        
        // Validation errors
        self::VALIDATION_ERROR       => 400,
        self::INVALID_CONTEXT        => 400,
        
        // Cache errors
        self::CACHE_ERROR            => 500,
    ];

    /**
     * Get the message for an error code
     *
     * @param string $code     The error code
     * @param string $fallback Fallback message if code not found
     * 
     * @return string The error message
     */
    public static function get_message($code, $fallback = 'Unknown error.') {
        return isset(self::$messages[$code]) ? self::$messages[$code] : $fallback;
    }

    /**
     * Get the HTTP status code for an error code
     *
     * @param string $code The error code
     * @param int    $fallback Fallback status code if code not found
     * 
     * @return int The HTTP status code
     */
    public static function get_status_code($code, $fallback = 400) {
        return isset(self::$status_codes[$code]) ? self::$status_codes[$code] : $fallback;
    }

    /**
     * Create a standardized error response array
     *
     * @param string $code    Error code
     * @param string $message Custom error message (optional, will use default if not provided)
     * @param array  $data    Additional error data (optional)
     * 
     * @return array Formatted error response
     */
    public static function get_error_response($code, $message = '', $data = []) {
        $error = [
            'code'    => $code,
            'message' => !empty($message) ? $message : self::get_message($code),
            'status'  => self::get_status_code($code),
        ];

        // Add any additional data
        if (!empty($data)) {
            $error = array_merge($error, $data);
        }

        return $error;
    }
    
    /**
     * Send a JSON error response and terminate execution
     *
     * @param string $code    Error code
     * @param string $message Custom error message (optional)
     * @param array  $data    Additional error data (optional)
     */
    public static function send_json_error($code, $message = '', $data = []) {
        $response = self::get_error_response($code, $message, $data);
        wp_send_json_error($response);
    }
}